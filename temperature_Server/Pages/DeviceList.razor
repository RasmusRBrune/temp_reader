@page "/"
@page "/{DeviceId}"
<PageTitle>Index</PageTitle>

@using System.Security.Claims;
@using temperature_Server.Data;
@using temperature_Server.Services;
@inject IAccountService AccService;
@inject ITemperatureReaderDeviceService deviceService;
@inject NavigationManager NavManager;
@inject AuthenticationStateProvider authStateProvider;

﻿<CascadingValue Value="this">
	<div style="display:flex; height: max-content;overflow-y: hidden;overflow-x: hidden;">
		<div style="display:flex;width:160px;">

			<div style="display:block;height:90vh;overflow-x:hidden" class="btn-group" role="group">
				@if (Devices == null)
				{

					<p><em>Loading...</em></p>

				}
				else
				{
					@foreach (TemperatureReaderDevice device in Devices)
					{
						<button style="width:160px" type="button"
								class="btn @GetButtonClass(device)"
						@onclick=@( () => ActivateDevice(device) )>
							@device.Id.ToString()
						</button>
					}
				}
			</div>
		</div>
		@if (ActiveDevice != null && DeviceId == ActiveDevice?.Id.ToString())
		{

			<DeviceComponent DeviceId="@ActiveDevice.Id" />
		}
		@*@ChildContent*@
	</div>
	@if(Popup != null)
	{
	<div>
			@if(Popup == "Delete")
			{
				<RemoveDeviceOverlay DeviceName="ActiveDevice.DisplayName"></RemoveDeviceOverlay>
			}
			else
			{
				<AddDeviceOverlay></AddDeviceOverlay>
			}
		</div>
	}
</CascadingValue>

<button @onclick=@(()=>Popup="Delete") disabled=@DeviceIsNotSelected>Delete</button>
<button @onclick=@(()=>Popup="Add")>Add Device</button>

@code {
	public TemperatureReaderDevice? ActiveDevice { get; set; }
	[Parameter]
	public string? DeviceId { get; set; }
	public bool DeviceIsNotSelected { get => ActiveDevice == null; }
	public List<TemperatureReaderDevice>? Devices { get; set; }
	string GetButtonClass(TemperatureReaderDevice device)
	{
		return device == ActiveDevice ? "btn-primary" : "btn-secondary";
	}

	List<DeviceComponent>? DeviceComponents { get; set; } = new();

	public object? Popup { get; set; }
	private Guid AccountId { get; set; }

	internal void AddPage(TemperatureReaderDevice device)
	{
		Devices.Add(device);
		if (Devices.Count == 1)
			ActiveDevice = device;
		StateHasChanged();
	}

	internal async void Delete(string deviceName)
	{
		var deviceId = Devices.FirstOrDefault(e => e.DisplayName == deviceName)?.Id;
		if(deviceId != null)
		{
			await deviceService.DeleteAsync(deviceId.GetValueOrDefault());
		}
	}

	internal async void AddDevice(string deviceKey)
	{
		var authState = await authStateProvider
						.GetAuthenticationStateAsync();
		var user = authState.User;
		if (user.Identity is not null && user.Identity.IsAuthenticated)
		{
			var userid = user.FindFirst(c => c.Type == ClaimTypes.NameIdentifier)?.Value;
			if (userid != null)
			{
				var accid = (await AccService.FindByUserId(userid)).Id;
				var currentUser = await AccService.GetSingleWithIncludeAsync(accid);
				Devices = currentUser.Devices.ToList();
				await deviceService.PairWithAccount(deviceKey, accid);
			}
		}
	}

	internal void CancelPopup()
	{
		Popup = null;
	}

	void ActivateDevice(TemperatureReaderDevice device)
	{
		ActiveDevice = device;
		NavManager.NavigateTo($"/{device.Id.ToString()}");
	}

	protected override async Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();
		var authState = await authStateProvider
						.GetAuthenticationStateAsync();
		var user = authState.User;
		if (user.Identity is not null && user.Identity.IsAuthenticated)
		{
			var userid = user.FindFirst(c => c.Type == ClaimTypes.NameIdentifier)?.Value;
			if (userid != null)
			{
				var accid = (await AccService.FindByUserId(userid)).Id;
				var currentUser = await AccService.GetSingleWithIncludeAsync(accid);
				Devices = currentUser.Devices.ToList();
			}
		}
		if (DeviceId != null && DeviceId != "")
		{
			ActiveDevice = Devices?.FirstOrDefault(e => e.Id.ToString() == DeviceId);
		}
	}
}